# SecurePicoMQTT - Seguran√ßa em IoT na BitDogLab com MQTT

## Vis√£o Geral

Este projeto implementa uma comunica√ß√£o MQTT segura utilizando a placa **BitDogLab baseada no Raspberry Pi Pico W**, programada em C com o SDK do Pico e a pilha de rede lwIP. O objetivo √© estabelecer uma conex√£o Wi-Fi, conectar-se a um broker MQTT (Mosquitto), publicar mensagens em t√≥picos espec√≠ficos, implementar autentica√ß√£o, aplicar criptografia leve com XOR e adicionar prote√ß√£o contra ataques de sniffing e replay, atendendo aos requisitos da **Tarefa Unidade 2 - Parte 2** do programa **EMBARCATECH**.

---

## Objetivos

- **Conex√£o Wi-Fi**: Estabelecer conex√£o com uma rede Wi-Fi protegida usando autentica√ß√£o WPA2.
- **Conex√£o MQTT**: Conectar a placa ao broker Mosquitto com autentica√ß√£o de usu√°rio e senha.
- **Publica√ß√£o de Mensagens**: Enviar mensagens em texto claro e criptografadas no t√≥pico `escola/sala1/temperatura` e outros.
- **Criptografia Leve**: Implementar ofusca√ß√£o com cifra XOR (chave 42) para proteger contra sniffing b√°sico.
- **Prote√ß√£o contra Replay**: Adicionar timestamp √†s mensagens para evitar ataques de repeti√ß√£o.
- **Diagn√≥stico de Rede**: Utilizar Wireshark para monitoramento e an√°lise de tr√°fego, com solu√ß√£o de problemas de firewall.

---

## Introdu√ß√£o

- O que √© MQTT?  
MQTT (Message Queuing Telemetry Transport) √© um protocolo de comunica√ß√£o leve e eficiente, projetado para conectar dispositivos em redes com pouca largura de banda, lat√™ncia alta ou conectividade intermitente ‚Äî exatamente o tipo de ambiente encontrado em aplica√ß√µes de Internet das Coisas (IoT).
O MQTT segue o modelo publish/subscribe (publica√ß√£o/assinatura), no qual os dispositivos podem atuar como:

  - Publicadores (publishers): enviam mensagens sobre determinado t√≥pico (ex: "sensor/temperatura").

  - Subscritores (subscribers): recebem as mensagens dos t√≥picos que assinaram.

  Esse modelo desacopla os emissores e receptores ‚Äî ou seja, eles n√£o precisam conhecer a exist√™ncia um do outro, o que facilita muito a escalabilidade e flexibilidade de sistemas IoT com dezenas ou centenas de dispositivos distribu√≠dos.

- O que √© um broker MQTT?  
  O broker √© o servidor que faz o papel de intermedi√°rio: ele recebe mensagens dos publicadores e distribui para todos os subscritores interessados. Ele garante a entrega correta, eficiente e (em n√≠veis mais avan√ßados) confi√°vel das mensagens.

- O que √© o Mosquitto?  
  Mosquitto √© uma implementa√ß√£o leve e de c√≥digo aberto de um broker MQTT. Ele √© amplamente usado em projetos de IoT por sua facilidade de uso, suporte a autentica√ß√£o, criptografia e compatibilidade com diversas plataformas, incluindo sistemas embarcados como o Raspberry Pi Pico W.


## üõ†Ô∏è Materiais Necess√°rios

- **Hardware**:
  - Placa BitDogLab com Raspberry Pi Pico W
- **Software**:
  - Visual Studio Code com extens√µes CMake e Pico SDK
  - Mosquitto (broker MQTT) configurado no sistema
  - Wireshark para an√°lise de tr√°fego
  - SDK do Raspberry Pi Pico
  - Biblioteca lwIP para MQTT
- **Rede**:
  - Rede Wi-Fi protegida com WPA2 (SSID e senha fornecidos)

---

## üìÇ Estrutura do Projeto

```
SecurePicoMQTT/
‚îú‚îÄ‚îÄ CMakeLists.txt
‚îú‚îÄ‚îÄ main.c
‚îú‚îÄ‚îÄsrc/display_oled.c 
‚îú‚îÄ‚îÄinclude/display_oled.h
‚îú‚îÄ‚îÄsrc/mqtt_comm.c
‚îú‚îÄ‚îÄ include/mqtt_comm.h
‚îú‚îÄ‚îÄsrc/mqtt_publisher.c
‚îú‚îÄ‚îÄinclude/mqtt_publisher.h
‚îú‚îÄ‚îÄsrc/mqtt_subscriber.c
‚îú‚îÄ‚îÄinclude/mqtt_subscriber.h
‚îú‚îÄ‚îÄsrc/tratar_gpio.c
‚îú‚îÄ‚îÄinclude/tratar_gpio.h
‚îú‚îÄ‚îÄ src/wifi_conn.c
‚îú‚îÄ‚îÄ include/wifi_conn.h
‚îú‚îÄ‚îÄ src/xor_cipher.c
‚îú‚îÄ‚îÄ include/xor_cipher.h
‚îú‚îÄ‚îÄoled/ssd1306_font.h
‚îú‚îÄ‚îÄoled/ssd1306_i2c.c
‚îú‚îÄ‚îÄoled/ssd1306_i2c.h
‚îú‚îÄ‚îÄoled/ssd1306.h
‚îú‚îÄ‚îÄ.gitignore
‚îú‚îÄ‚îÄmosq_pub.py
‚îú‚îÄ‚îÄ lwipopts.h
‚îú‚îÄ‚îÄ pico_sdk_import.cmake
‚îî‚îÄ‚îÄ README.md
```

---

## üöÄ Etapas de Implementa√ß√£o

### Etapa 1: Conex√£o Wi-Fi
- **Objetivo**: Conectar a Pico W a uma rede Wi-Fi usando autentica√ß√£o WPA2.
- **Implementa√ß√£o**:
  - Arquivos: `wifi_conn.c`, `wifi_conn.h`, `SecurePicoMQTT.c`, `CMakeLists.txt`
  - C√≥digo bloquenate que configura o chip CYW43 para modo esta√ß√£o (STA) e tenta conex√£o com timeout de 30 segundos.

#### C√≥digo

- main.c:
```c
#include "include/wifi_conn.h"
#include "pico/stdlib.h"
#include <stdio.h>

int main() {
    // Inicializa a biblioteca padr√£o do Pico (necess√°ria para GPIO, UART, etc.)
    stdio_init_all();
    sleep_ms(2000); // Tempo para abrir o monitor serial

    // Credenciais da rede Wi-Fi (substitua pelos valores reais)
    const char *ssid = "minha-rede-wifi";
    const char *password = "minha-senha-rede-wifi";

    // Chama a fun√ß√£o para conectar ao Wi-Fi
    connect_to_wifi(ssid, password);

    // Loop principal para manter o programa em execu√ß√£o
    while (true) {
        // Adicione aqui futuras funcionalidades (ex.: MQTT, autentica√ß√£o, criptografia)
        sleep_ms(1000); // Aguarda 1 segundo para evitar consumo excessivo de CPU
    }

    return 0;
}
```

- wifi_conn.c:
```c
#include "include/wifi_conn.h"         // Cabe√ßalho com a declara√ß√£o da fun√ß√£o de conex√£o Wi-Fi
#include "pico/cyw43_arch.h"           // Biblioteca para controle do chip Wi-Fi CYW43 no Raspberry Pi Pico W
#include <stdio.h>                     // Biblioteca padr√£o de entrada/sa√≠da (para usar printf)

/**
 * Fun√ß√£o: connect_to_wifi
 * Objetivo: Inicializar o chip Wi-Fi da Pico W e conectar a uma rede usando SSID e senha fornecidos.
 */
void connect_to_wifi(const char *ssid, const char *password) {
    // Inicializa o driver Wi-Fi (CYW43). Retorna 0 se for bem-sucedido.
    if (cyw43_arch_init()) {
        printf("Erro ao iniciar Wi-Fi\n");
        return;
    }

    // Habilita o modo esta√ß√£o (STA) para se conectar a um ponto de acesso.
    cyw43_arch_enable_sta_mode();

    // Tenta conectar √† rede Wi-Fi com um tempo limite de 30 segundos (30000 ms).
    // Utiliza autentica√ß√£o WPA2 com criptografia AES.
    if (cyw43_arch_wifi_connect_timeout_ms(ssid, password, CYW43_AUTH_WPA2_AES_PSK, 30000)) {
        printf("Erro ao conectar\n");  // Se falhar, imprime mensagem de erro.
    } else {        
        printf("Conectado ao Wi-Fi\n");  // Se conectar com sucesso, exibe confirma√ß√£o.
    }
}

- wifi_conn.h:
```c
#ifndef WIFI_CONN_H
#define WIFI_CONN_H

void connect_to_wifi(const char *ssid, const char *password);

#endif // WIFI_CONN_H
```

#### Resultado: 
- Conex√£o bem-sucedida, confirmada no monitor serial:
  ```
  ---- Opened the serial port COM4 ----
  Conectado ao Wi-Fi
  ```

### Etapa 2: Configura√ß√£o MQTT B√°sica
- **Objetivo**: Estabelecer conex√£o com o broker Mosquitto e publicar mensagens no t√≥pico `test/topic`.
- **Implementa√ß√£o**:
  - Arquivos adicionados: `mqtt_comm.c`, `mqtt_comm.h`, `lwipopts.h`
  - Configura√ß√£o do broker com autentica√ß√£o (usu√°rio: `CarlosMP`, senha: `cajuca1801`).
  - Solu√ß√£o de problema: Firewall do Windows bloqueava pacotes MQTT na porta 1883. Criada regra de entrada para permitir tr√°fego TCP na porta 1883.
- **Resultado**:
  - Monitor serial:
    ```
    Conectado ao Wi-Fi
    Conectado ao broker MQTT com sucesso!
    Publica√ß√£o MQTT enviada com sucesso!
    ```
  - Log do Mosquitto:
    ```
    New client connected from 192.168.15.102 as pico_client
    Received PUBLISH from pico_client on topic test/topic
    ```

### Etapa 3: Publica√ß√£o em Texto Claro
- **Objetivo**: Publicar mensagem `"26.5"` no t√≥pico `escola/sala1/temperatura`.
- **Implementa√ß√£o**:
  - Substitui√ß√£o no `SecurePicoMQTT.c`:
    ```c
    const char *message = "26.5";
    const char *topic = "escola/sala1/temperatura";
    ```
- **Resultado**:
  - Mensagem capturada no Wireshark em texto claro (`32362e35` em ASCII hexadecimal, decodificado como `"26.5"`).
  - Log do Mosquitto:
    ```
    Received PUBLISH from pico_client (d0, q0, r0, m0, 'escola/sala1/temperatura', ... (4 bytes))
    ```

### Etapa 4: Autentica√ß√£o no Mosquitto
- **Objetivo**: Configurar autentica√ß√£o no broker e testar com cliente.
- **Implementa√ß√£o**:
  - Configura√ß√£o do `mosquitto.conf`:
    ```conf
    listener 1883
    allow_anonymous false
    password_file C:\caminho\para\passwd
    ```
  - Cria√ß√£o de senha:
    ```
    mosquitto_passwd -c C:\caminho\para\passwd CarlosMP
    ```
  - Testes com `mosquitto_pub` e `mosquitto_sub` confirmaram funcionamento.
- **Resultado**:
  - Publica√ß√µes manuais de `"37.3"`, `"38.4"`, `"40.2"` no t√≥pico `escola/sala1/temperatura` foram recebidas corretamente.

### Etapa 5: Criptografia com XOR
- **Objetivo**: Ofuscar mensagens com cifra XOR (chave 42) para evitar sniffing b√°sico.
- **Implementa√ß√£o**:
  - Arquivos adicionados: `xor_cipher.c`, `xor_cipher.h`
  - C√≥digo em `SecurePicoMQTT.c`:
    ```c
    const char* mensagem_clara = "26.5";
    char mensagem_cript[32];
    xor_encrypt((const uint8_t*)mensagem_clara, (uint8_t*)mensagem_cript, strlen(mensagem_clara), XOR_KEY);
    mqtt_comm_publish(MQTT_TOPIC, (uint8_t*)mensagem_cript, strlen(mensagem_clara));
    ```
  - Mensagem `"26.5"` criptografada para `181C041F` (XOR com 0x2A).
- **Resultado**:
  - Wireshark capturou mensagem ofuscada (`181C041F`).
  - Decriptografia via Python:
    ```python
    msg = bytes([0x18, 0x1C, 0x04, 0x1F])
    decifrada = bytes([b ^ 42 for b in msg])
    print(decifrada.decode())  # Sa√≠da: 26.5
    ```
  - Log do Mosquitto confirmou recebimento.

### Etapa 6: Prote√ß√£o contra Replay
- **Objetivo**: Adicionar timestamp √†s mensagens para evitar ataques de replay.
- **Implementa√ß√£o**:
  - Timestamp gerado com `to_ms_since_boot(get_absolute_time())` (ex.: `396547116` ms ‚âà 6 minutos e 36 segundos desde o boot).
  - Sugest√£o de formato leg√≠vel: `T=26.5 t=396.5s`.
- **Resultado**:
  - Timestamp inclu√≠do, mas formato bruto exibido (`396547116`). Necess√°ria implementa√ß√£o no subscriber para validar timestamps e descartar mensagens antigas.

---

## üì° Resultados

- **Conex√£o Wi-Fi**: Estabelecida com sucesso.
- **Conex√£o MQTT**: Funcionando com autentica√ß√£o no broker Mosquitto.
- **Publica√ß√£o**: Mensagens enviadas em texto claro e criptografadas com XOR.
- **Seguran√ßa**:
  - Autentica√ß√£o implementada no Mosquitto.
  - Criptografia XOR aplicada, com mensagem ofuscada capturada no Wireshark.
  - Timestamp adicionado para prote√ß√£o contra replay (pendente valida√ß√£o no subscriber).
- **Diagn√≥stico**: Problema de firewall resolvido com regra TCP na porta 1883. Wireshark foi essencial para identificar pacotes bloqueados.

---

## üß† Li√ß√µes Aprendidas

- **Firewall do Windows**: Pode bloquear pacotes MQTT silenciosamente, mesmo com regras expl√≠citas. O Wireshark em modo prom√≠scuo mascara o problema temporariamente.
- **lwIP**: Sens√≠vel a descartes silenciosos de pacotes, exigindo configura√ß√£o cuidadosa do ambiente de rede.
- **Criptografia XOR**: Eficaz para ofusca√ß√£o b√°sica, mas inadequada para seguran√ßa robusta devido √† simplicidade.
- **Testes de Rede**: Essenciais para validar comportamento em ambientes reais, especialmente em sistemas embarcados.

---

## üîí Pr√≥ximos Passos

- **Melhorar Criptografia**: Substituir XOR por AES ou HMAC usando mbedTLS para maior seguran√ßa.
- **Proteger contra Replay**: Implementar valida√ß√£o de timestamps no subscriber, descartando mensagens com timestamps antigos.
- **Escalabilidade**: Testar com m√∫ltiplas placas BitDogLab em uma rede escolar, ajustando QoS e t√≥picos.
- **TLS**: Migrar para MQTT com TLS (porta 8883) para criptografia de transporte.

---

## üìö Refer√™ncias

- [Raspberry Pi Pico SDK Networking](https://www.raspberrypi.com/documentation/pico-sdk/networking.html)
- [Mosquitto Documentation](https://mosquitto.org/)
- [lwIP Documentation](https://www.nongnu.org/lwip/)
- [BitDogLab GitHub](https://github.com/BitDogLab/BitDogLab-C)

---

## üí° Observa√ß√µes

- Durante os testes, foi necess√°rio manter o Wireshark ativo para contornar bloqueios do firewall no Windows. Para ambientes de produ√ß√£o, recomenda-se usar Linux ou configurar o broker em um dispositivo dedicado (ex.: Raspberry Pi).
- A implementa√ß√£o de timestamp no subscriber precisa ser conclu√≠da para validar prote√ß√£o contra replay.